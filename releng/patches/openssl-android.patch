From 99ffd5ade5b2bbb03650416a292da7a583672967 Mon Sep 17 00:00:00 2001
From: Richard Levitte <levitte@openssl.org>
Date: Sat, 29 Feb 2020 06:43:26 +0100
Subject: [PATCH] Andoid cross compile: change ANDROID_NDK_HOME to
 ANDROID_NDK_ROOT

According to forum discussions with NDK developers, ANDROID_NDK_HOME
is used for something else.

Fixes #11205

Reviewed-by: Matt Caswell <matt@openssl.org>
(Merged from https://github.com/openssl/openssl/pull/11206)
---
 Configurations/15-android.conf |  6 +++---
 NOTES.ANDROID                  | 16 ++++++++--------
 2 files changed, 11 insertions(+), 11 deletions(-)

diff -Nur openssl-orig/Configurations/15-android.conf openssl/Configurations/15-android.conf
--- openssl-orig/Configurations/15-android.conf	2021-08-24 15:38:47.000000000 +0200
+++ openssl/Configurations/15-android.conf	2021-11-07 10:51:40.000000000 +0100
@@ -24,17 +24,17 @@
 
             my $ndk_var;
             my $ndk;
-            foreach (qw(ANDROID_NDK_HOME ANDROID_NDK)) {
+            foreach (qw(ANDROID_NDK_ROOT ANDROID_NDK)) {
                 $ndk_var = $_;
                 $ndk = $ENV{$ndk_var};
                 last if defined $ndk;
             }
-            die "\$ANDROID_NDK_HOME is not defined" if (!$ndk);
+            die "\$ANDROID_NDK_ROOT is not defined" if (!$ndk);
             my $is_standalone_toolchain = -f "$ndk/AndroidVersion.txt";
             my $ndk_src_props = "$ndk/source.properties";
             my $is_ndk = -f $ndk_src_props;
             if ($is_ndk == $is_standalone_toolchain) {
-                die "\$ANDROID_NDK_HOME=$ndk is invalid";
+                die "\$ANDROID_NDK_ROOT=$ndk is invalid";
             }
             $ndk = canonpath($ndk);
 
diff -Nur openssl-orig/NOTES.ANDROID openssl/NOTES.ANDROID
--- openssl-orig/NOTES.ANDROID	2021-08-24 15:38:47.000000000 +0200
+++ openssl/NOTES.ANDROID	2021-11-07 10:50:03.000000000 +0100
@@ -24,7 +24,7 @@
  need to know the prefix to extend your PATH, in order to invoke
  $(CROSS_COMPILE)clang [*gcc on NDK 19 and lower] and company. (Configure
  will fail and give you a hint if you get it wrong.) Apart from PATH
- adjustment you need to set ANDROID_NDK_HOME environment to point at the
+ adjustment you need to set ANDROID_NDK_ROOT environment to point at the
  NDK directory. If you're using a side-by-side NDK the path will look
  something like /some/where/android-sdk/ndk/<ver>, and for a standalone
  NDK the path will be something like /some/where/android-ndk-<ver>.
@@ -35,21 +35,21 @@
  with N being the numerical value of the target platform version. For example,
  to compile for Android 10 arm64 with a side-by-side NDK r20.0.5594570
 
-	export ANDROID_NDK_HOME=/home/whoever/Android/android-sdk/ndk/20.0.5594570
-	PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_HOME/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:$PATH
+	export ANDROID_NDK_ROOT=/home/whoever/Android/android-sdk/ndk/20.0.5594570
+	PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_ROOT/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:$PATH
 	./Configure android-arm64 -D__ANDROID_API__=29
 	make
 
  Older versions of the NDK have GCC under their common prebuilt tools directory, so the bin path
  will be slightly different. EG: to compile for ICS on ARM with NDK 10d:
 
-    export ANDROID_NDK_HOME=/some/where/android-ndk-10d
-    PATH=$ANDROID_NDK_HOME/toolchains/arm-linux-androideabi-4.8/prebuilt/linux-x86_64/bin:$PATH
+    export ANDROID_NDK_ROOT=/some/where/android-ndk-10d
+    PATH=$ANDROID_NDK_ROOT/toolchains/arm-linux-androideabi-4.8/prebuilt/linux-x86_64/bin:$PATH
     ./Configure android-arm -D__ANDROID_API__=14
     make
 
  Caveat lector! Earlier OpenSSL versions relied on additional CROSS_SYSROOT
- variable set to $ANDROID_NDK_HOME/platforms/android-<api>/arch-<arch> to
+ variable set to $ANDROID_NDK_ROOT/platforms/android-<api>/arch-<arch> to
  appoint headers-n-libraries' location. It's still recognized in order
  to facilitate migration from older projects. However, since API level
  appears in CROSS_SYSROOT value, passing -D__ANDROID_API__=N can be in
@@ -64,9 +64,9 @@
 
  Another option is to create so called "standalone toolchain" tailored
  for single specific platform including Android API level, and assign its
- location to ANDROID_NDK_HOME. In such case you have to pass matching
+ location to ANDROID_NDK_ROOT. In such case you have to pass matching
  target name to Configure and shouldn't use -D__ANDROID_API__=N. PATH
- adjustment becomes simpler, $ANDROID_NDK_HOME/bin:$PATH suffices.
+ adjustment becomes simpler, $ANDROID_NDK_ROOT/bin:$PATH suffices.
 
  Running tests (on Linux)
  ------------------------
From ca50d69cfe51f742ca052201fe4c5d851b28ae6c Mon Sep 17 00:00:00 2001
From: Richard Levitte <levitte@openssl.org>
Date: Tue, 3 Mar 2020 22:55:09 +0100
Subject: [PATCH] Configurations: Fix "android" configuration target

This target gave '-pie' as a C flag when it should be a linker flag.
Additionally, we add '-fPIE' as C flag for binaries.

Fixes #11237

Reviewed-by: Matt Caswell <matt@openssl.org>
(Merged from https://github.com/openssl/openssl/pull/11238)
---
 Configurations/15-android.conf | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff -Nur openssl-orig/Configurations/15-android.conf openssl/Configurations/15-android.conf
--- openssl-orig/Configurations/15-android.conf	2021-11-07 10:51:40.000000000 +0100
+++ openssl/Configurations/15-android.conf	2021-11-07 10:53:14.000000000 +0100
@@ -188,7 +188,8 @@
         cppflags         => add(sub { android_ndk()->{cppflags} }),
         cxxflags         => add(sub { android_ndk()->{cflags} }),
         bn_ops           => sub { android_ndk()->{bn_ops} },
-        bin_cflags       => "-pie",
+        bin_cflags       => "-fPIE",
+        bin_lflags       => "-pie",
         enable           => [ ],
     },
     "android-arm" => {
